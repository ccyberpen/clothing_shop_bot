from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from utility.database import *

def main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥"), KeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞")],
            [KeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã"), KeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
        ],
        resize_keyboard=True
    )
def catalog_keyboard(categories,back_id=None):
    builder = InlineKeyboardBuilder()
    for cat in categories:
        builder.button(text=cat['name'], callback_data=f"cat_{cat['category_id']}")
    if back_id:
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"cat_{back_id}")
    
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    builder.adjust(1, repeat=True)
    return builder.as_markup()

def products_keyboard(product_index, total_products, category_id, product_id, user_id=None):
    builder = InlineKeyboardBuilder()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω user_id)
    in_cart = 0
    total_available = 0
    if user_id:
        sizes = get_product_sizes(product_id)
        if sizes:
            total_available = sum(size['quantity'] for size in sizes)
            in_cart = check_product_in_cart(user_id, product_id)
        else:
            total_available = get_product_total_quantity(product_id)
            in_cart = check_product_in_cart(user_id, product_id)
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if product_index > 0:
        builder.button(text="‚¨ÖÔ∏è", callback_data=f"prev_{product_index}_{category_id}")
    
    # –ö–Ω–æ–ø–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    cart_text = "üõí –í –∫–æ—Ä–∑–∏–Ω—É"
    if user_id and in_cart > 0:
        if total_available > 0:
            cart_text = f"‚úÖ –í –∫–æ—Ä–∑–∏–Ω–µ ({in_cart}/{total_available})"
        else:
            cart_text = "‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"
    
    builder.button(
        text=cart_text,
        callback_data=f"cart_{product_id}"
    )
    
    if product_index < total_products - 1:
        builder.button(text="‚û°Ô∏è", callback_data=f"next_{product_index}_{category_id}")
    
    builder.row(
        InlineKeyboardButton(
            text="üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", 
            callback_data=f"back_to_cat_{category_id}"
        ),
        InlineKeyboardButton(
            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
            callback_data="main_menu"
        )
    )
    
    builder.adjust(2, 1)
    return builder.as_markup()
def cart_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    builder.adjust(1)
    return builder.as_markup()

def cancel_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order")
    return builder.as_markup()
def orders_keyboard(orders: list):
    """–ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤"""
    builder = InlineKeyboardBuilder()
    for order in orders:
        status_name = {
                'new': '–ù–æ–≤—ã–π',
                'processing': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
                'shipped': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
                'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω',
                'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
            }.get(order['status'],'?')
        builder.button(
            text=f"–ó–∞–∫–∞–∑ #{order['order_id']} - {status_name}",
            callback_data=f"order_detail_{order['order_id']}"
        )
    builder.button(text="–ù–∞–∑–∞–¥", callback_data="main_menu")
    builder.adjust(1)
    return builder.as_markup()

def back_to_orders_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤"""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚Üê –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="back_to_orders")
    return builder.as_markup()