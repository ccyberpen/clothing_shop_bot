from aiogram import types,Router,F
from aiogram.filters import  CommandStart
from aiogram.fsm.context import FSMContext
from keyboards import user_keyborad
from aiogram.types import FSInputFile
from aiogram.enums import ParseMode
from utility.database import *
from handlers.states import CatalogStates, CartStates, OrderStates
import asyncio
from aiogram.utils.media_group import MediaGroupBuilder
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot_instance import bot
user_router= Router()


@user_router.message(CommandStart())
async def cmd_start(message: types.Message, state:FSMContext):
    await state.clear()
    if not get_user(message.from_user.id):
        add_user(message.from_user.id,message.from_user.username)
    await message.answer("üëï –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ \"–ù–æ—É–Ω–µ–π–º —Å—Ç–æ—Ä–µ\"!\n",reply_markup=user_keyborad.main_keyboard())
    

@user_router.message(F.text=="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def cmd_support(message: types.Message, state:FSMContext):
    await state.clear()
    photo = FSInputFile("static/images/support.jpg")
    support_text = (
        "üìû <b>–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n"
        "–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –∫–∞–∫–∏—Ö –ª–∏–±–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É:\n\n"
        "@cyberpen"
    )
    await message.answer_photo(
        photo=photo,
        caption=support_text,
        reply_markup=user_keyborad.main_keyboard(),
        parse_mode=ParseMode.HTML
    )
###########################################################
#                   –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ê–¢–ê–õ–û–ì–ê                  #
###########################################################
@user_router.message(F.text == "üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥")
async def start_catalog(message: types.Message, state: FSMContext):
    try:
        root_categories = get_categories(parent_id=None)
        
        if not root_categories:
            await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", reply_markup=user_keyborad.main_keyboard())
            return
        
        
        
        # 1. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        await message.answer(
            "–û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥...",
            reply_markup=types.ReplyKeyboardRemove()
        )
        
        # 2. –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã Telegram –æ–±—Ä–∞–±–æ—Ç–∞–ª —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        await asyncio.sleep(0.3)
        
        # 3. –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        try:
            await message.bot.delete_message(
                chat_id=message.chat.id,
                message_id=message.message_id + 1  # ID —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            )
        except:
            pass
        
        # 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        sent_message = await message.answer(
            "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=user_keyborad.catalog_keyboard(root_categories)
        )
        await state.set_state(CatalogStates.choosing_category)
        await state.update_data(
            catalog_message_id = sent_message.message_id
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ start_catalog: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
            reply_markup=user_keyborad.main_keyboard()
        )

@user_router.callback_query(F.data.startswith("cat_"), CatalogStates.choosing_category)
async def choose_category(callback: types.CallbackQuery, state: FSMContext):
    try:
        category_id = int(callback.data.split("_")[1])
        categories = get_categories(parent_id=category_id)
        
        if categories:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            sent_message = await callback.message.edit_text(
                "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=user_keyborad.catalog_keyboard(categories, back_id=get_parent_id(category_id))
            )
            await state.update_data(
                catalog_message_id = sent_message.message_id
            )
        else:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            await callback.message.delete()
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
            await show_products(callback.message, category_id, state)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ choose_category: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")

async def show_products(message: types.Message, category_id: int, state: FSMContext):
    products = get_products(category_id)
    
    if not products:
        await message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤",reply_markup=user_keyborad.main_keyboard())
        await state.clear()
        return
    
    await state.set_state(CatalogStates.viewing_products)
    await state.update_data(
        current_index=0,
        category_id=category_id,
        products=products,
        product_messages=[message.message_id]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    )
    
    await display_product(message, products[0], 0, len(products), category_id, state)

async def display_product(message: types.Message, product: dict, index: int, total: int, category_id: int, state: FSMContext):
    images = get_product_images(product['product_id'])
    caption = (
        f"<b>{product['name']}</b>\n\n"
        f"üí∞ –¶–µ–Ω–∞: <code>{product['price']} ‚ÇΩ</code>\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product['description'] or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
        f"üÜî –ê—Ä—Ç–∏–∫—É–ª: <code>{product['product_id']}</code>"
    )

    message_ids = []

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    data = await state.get_data()
    print(data["product_messages"])
    if 'product_messages' in data:
        for msg_id in reversed(data['product_messages']):
            try:
                print(f"–£–¥–∞–ª–µ–Ω–∏–µ {msg_id}")
                await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–æ–≤–∞—Ä–æ–º {msg_id}: {e}")
                continue

    if images:
        max_images = 10  # –õ–∏–º–∏—Ç Telegram
        images = images[:max_images]

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
            media_group = MediaGroupBuilder()
            for img in images:
                photo = FSInputFile(f"admin/static/products/{img['image_path']}")
                media_group.add_photo(media=photo)
            
            sent_messages = await message.answer_media_group(media=media_group.build())
            message_ids.extend([m.message_id for m in sent_messages])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    msg = await message.answer(
        text=caption,
        reply_markup=user_keyborad.products_keyboard(index, total, category_id, product['product_id']),
        parse_mode=ParseMode.HTML
    )
    message_ids.append(msg.message_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º IDs —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(product_messages=message_ids)
    print(f"–ò—Ç–æ–≥–æ –∏–º–µ–µ–º: {message_ids}")
    return message_ids

@user_router.callback_query(F.data.startswith(("prev_", "next_")), CatalogStates.viewing_products)
async def navigate_product(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    products = data['products']
    
    action, current_idx, category_id = callback.data.split("_")
    current_idx = int(current_idx)
    category_id = int(category_id)
    
    new_idx = current_idx + 1 if action == "next" else current_idx - 1
    if 0 <= new_idx < len(products):
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –Ω–æ–≤—ã—Ö
        if 'product_messages' in data:
            for msg_id in reversed(data['product_messages']):
                try:
                    await callback.bot.delete_message(
                        chat_id=callback.message.chat.id,
                        message_id=msg_id
                    )
                except:
                    continue
        
        await display_product(callback.message, products[new_idx], new_idx, len(products), category_id, state)
        await state.update_data(current_index=new_idx)

@user_router.callback_query(F.data.startswith("back_to_cat_"), CatalogStates.viewing_products)
async def back_to_categories(callback: types.CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("_")[-1])
    parent_id = get_parent_id(category_id)
    if parent_id:
        categories = get_categories(parent_id=parent_id)
        print(callback.message.message_id)
        await callback.message.delete()
        data = await state.get_data()
        if 'product_messages' in data:
            for msg_id in reversed(data['product_messages']):
                try:
                    await callback.bot.delete_message(chat_id=callback.message.chat.id, message_id=msg_id)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–æ–≤–∞—Ä–æ–º: {e}")
                    continue
        await callback.message.answer(
            "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=user_keyborad.catalog_keyboard(categories, back_id=get_parent_id(parent_id))
        )
    else:
        root_categories = get_categories(parent_id=None)
        await callback.message.delete()
        data = await state.get_data()
        if 'product_messages' in data:
            for msg_id in reversed(data['product_messages']):
                try:
                    await callback.bot.delete_message(chat_id=callback.message.chat.id, message_id=msg_id)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–æ–≤–∞—Ä–æ–º: {e}")
                    continue
        
        await callback.message.answer(
            "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=user_keyborad.catalog_keyboard(root_categories)
        )
    
    await state.set_state(CatalogStates.choosing_category)

@user_router.callback_query(F.data == "main_menu")
async def return_to_main_menu(callback: types.CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        if 'product_messages' in data:
            for msg_id in reversed(data['product_messages']):
                try:
                    await callback.bot.delete_message(chat_id=callback.message.chat.id, message_id=msg_id)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–æ–≤–∞—Ä–æ–º: {e}")
                    continue
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await callback.bot.delete_message(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id)
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await callback.message.answer(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=user_keyborad.main_keyboard()
        )
        callback.message.delete()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é: {e}")
        await callback.message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=user_keyborad.main_keyboard()
        )

def get_parent_id(category_id: int) -> int | None:
    """–ü–æ–ª—É—á–∞–µ–º ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
    conn = sqlite3.connect(DATABASE_NAME)
    cur = conn.cursor()
    cur.execute("""
        SELECT parent_id FROM categories 
        WHERE category_id = ?
    """, (category_id,))
    result = cur.fetchone()
    conn.close()
    
    if not result or not result[0] or str(result[0]).strip() == '':
        return None
    return int(result[0])

#######################################
#          –†–ê–ë–û–¢–ê –° –ö–û–†–ó–ò–ù–û–ô          #
#######################################
@user_router.callback_query(F.data.startswith("cart_"))
async def add_to_cart(callback: types.CallbackQuery, state: FSMContext):
    try:
        product_id = int(callback.data.split("_")[1])
        user_id = callback.from_user.id
        product = get_product(product_id)
        
        if not product:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        sizes = get_product_sizes(product_id)
        
        if sizes:
            await callback.answer()
            await state.set_state(CartStates.choosing_size)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
            sizes_kb = InlineKeyboardBuilder()
            available_sizes = []
            
            for size in sizes:
                if size['quantity'] > 0:
                    available_sizes.append(size)
                    sizes_kb.button(
                        text=f"{size['size_value']} (–æ—Å—Ç–∞–ª–æ—Å—å: {size['quantity']})",
                        callback_data=f"size_{size['size_id']}"
                    )
            
            if not available_sizes:
                await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤", show_alert=True)
                return
            
            sizes_kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_cart")
            sizes_kb.adjust(2)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            nav_data = await state.get_data()
            await state.update_data(
                product_id=product_id,
                product_name=product['name'],
                product_price=product['price'],
                product_index=nav_data.get('current_index', 0),
                category_id=nav_data.get('category_id'),
                products=nav_data.get('products', []),
                product_messages=nav_data.get('product_messages', [])
            )
            
            size_msg = await callback.message.answer(
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –¥–ª—è {product['name']}:",
                reply_markup=sizes_kb.as_markup()
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            messages = nav_data.get('product_messages', [])
            messages.append(size_msg.message_id)
            await state.update_data(product_messages=messages)
            
        else:
            # –î–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            total_quantity = get_product_total_quantity(product_id)
            if total_quantity <= 0:
                await callback.answer("–¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è", show_alert=True)
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ
            in_cart = check_product_in_cart(user_id, product_id)
            if in_cart >= total_quantity:
                await callback.answer(
                    f"–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ {total_quantity} —à—Ç.", 
                    show_alert=True
                )
                return
                
            add_to_cart_db(user_id, product_id)
            await callback.answer(f"{product['name']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@user_router.callback_query(F.data.startswith("size_"), CartStates.choosing_size)
async def choose_size(callback: types.CallbackQuery, state: FSMContext):
    try:
        size_id = int(callback.data.split("_")[1])
        user_id = callback.from_user.id
        data = await state.get_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        size_info = get_size_info(size_id)
        if not size_info or size_info['quantity'] <= 0:
            await callback.answer("–≠—Ç–æ—Ç —Ä–∞–∑–º–µ—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è", show_alert=True)
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        in_cart = check_product_in_cart(user_id, data['product_id'], size_id)
        if in_cart >= size_info['quantity']:
            await callback.answer(
                f"–ú–∞–∫—Å–∏–º—É–º {size_info['quantity']} —à—Ç. –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ {size_info['size_value']}",
                show_alert=True
            )
            return
            
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
        add_to_cart_db(user_id, data['product_id'], size_id)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ä–∞–∑–º–µ—Ä–∞
        await callback.message.delete()
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        await state.set_state(CatalogStates.viewing_products)
        await state.update_data(
            current_index=data['product_index'],
            category_id=data['category_id'],
            products=data['products'],
            product_messages=data.get('product_messages', [])
        )
        
        await callback.answer(
            f"{data['product_name']} (—Ä–∞–∑–º–µ—Ä: {size_info['size_value']}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!",
            show_alert=True
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await state.clear()

@user_router.callback_query(F.data == "cancel_cart", CartStates.choosing_size)
async def cancel_cart(callback: types.CallbackQuery, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º —Ç–æ–≤–∞—Ä–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ä–∞–∑–º–µ—Ä–∞
        await callback.message.delete()
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤
        await state.set_state(CatalogStates.viewing_products)
        await state.update_data(
            current_index=data['product_index'],
            category_id=data['category_id'],
            products=data['products'],
            product_messages=data.get('product_messages', [])
        )
        
        await callback.answer("–í—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ –æ—Ç–º–µ–Ω—ë–Ω")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await state.clear()

############################################################
#           –ü–†–û–°–ú–û–¢–† –ö–û–†–ó–ò–ù–´ –ò –û–§–û–†–ú–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê           #
############################################################

@user_router.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def view_cart(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    cart_items = get_cart_items(user_id)
    
    if not cart_items:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", reply_markup=user_keyborad.main_keyboard())
        return
    
    total_amount = sum(item['price'] * item['quantity'] for item in cart_items)
    cart_text = "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞</b>\n\n"
    
    for item in cart_items:
        size_text = f", —Ä–∞–∑–º–µ—Ä: {item['size_value']}" if item['size_value'] else ""
        cart_text += (
            f"‚ñ™Ô∏è {item['name']}{size_text}\n"
            f"   –ö–æ–ª-–≤–æ: {item['quantity']} √ó {item['price']} ‚ÇΩ = {item['quantity'] * item['price']} ‚ÇΩ\n\n"
        )
    
    cart_text += f"üí≥ <b>–ò—Ç–æ–≥–æ: {total_amount} ‚ÇΩ</b>"
    
    await state.set_state(OrderStates.viewing_cart)
    await message.answer(
        cart_text,
        parse_mode=ParseMode.HTML,
        reply_markup=user_keyborad.cart_keyboard()
    )
@user_router.callback_query(F.data == "checkout", OrderStates.viewing_cart)
async def start_checkout(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (–∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω):\n"
        "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤, +79123456789",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(OrderStates.creating_order)

@user_router.message(OrderStates.creating_order)
async def process_order(message: types.Message, state: FSMContext):
    try:
        user_id = message.from_user.id
        contact_info = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞
        if len(contact_info) < 5 or ',' not in contact_info:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è, –¢–µ–ª–µ—Ñ–æ–Ω\n"
                "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤, +79123456789",
                reply_markup=user_keyborad.cancel_keyboard()
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order_id = create_order(user_id, contact_info)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await message.answer(
            "‚úÖ <b>–í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n"
            f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: <code>{order_id}</code>\n"
            "–°—Ç–∞—Ç—É—Å: –í –æ–±—Ä–∞–±–æ—Ç–∫–µ\n\n"
            f"–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä +78005553535 <code>{get_order_total(order_id)}</code>‚ÇΩ",
            parse_mode=ParseMode.HTML,
            reply_markup=user_keyborad.main_keyboard()
        )
        
        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        clear_cart(user_id)
        await state.clear()
        
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=user_keyborad.main_keyboard()
        )
        await state.clear()

@user_router.callback_query(F.data == "cancel_order", OrderStates.creating_order)
async def cancel_checkout(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",reply_markup=user_keyborad.main_keyboard())
    await state.clear()
    await callback.answer()
    

##############################
#           –ó–ê–ö–ê–ó–´           #
##############################

@user_router.message(F.text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def show_user_orders(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = message.from_user.id
        orders = get_user_orders(user_id)
        
        if not orders:
            await message.answer(
                "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤",
                reply_markup=user_keyborad.main_keyboard()
            )
            return
        
        orders_text = "üì¶ <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã</b>\n\n"
        for order in orders:
            status_emoji = {
                'new': 'üÜï',
                'processing': 'üîÑ', 
                'shipped': 'üöö',
                'completed': '‚úÖ',
                'cancelled': '‚ùå'
            }.get(order['status'], '‚ÑπÔ∏è')
            
            orders_text += (
                f"{status_emoji} <b>–ó–∞–∫–∞–∑ #{order['order_id']}</b>\n"
                f"üìÖ –î–∞—Ç–∞: {order['created_at']}\n"
                f"üè∑ –°—Ç–∞—Ç—É—Å: {get_status_string(order['status'])}\n"
                f"üí≥ –°—É–º–º–∞: {order['total_amount']} ‚ÇΩ\n\n"
            )
        
        await message.answer(
            orders_text,
            parse_mode=ParseMode.HTML,
            reply_markup=user_keyborad.orders_keyboard(orders)
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∑–∞–∫–∞–∑–æ–≤: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤",
            reply_markup=user_keyborad.main_keyboard()
        )

@user_router.callback_query(F.data.startswith("order_detail_"))
async def show_order_detail(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    try:
        order_id = int(callback.data.split("_")[2])
        order = get_order_details(order_id)
        items = get_order_items(order_id)
        
        if not order or order['user_id'] != callback.from_user.id:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        order_text = (
            f"üì¶ <b>–ó–∞–∫–∞–∑ #{order['order_id']}</b>\n\n"
            f"üìÖ –î–∞—Ç–∞: {order['created_at']}\n"
            f"üè∑ –°—Ç–∞—Ç—É—Å: {get_status_string(order['status'])}\n"
        )
        
        if order.get('tracking_number'):
            order_text += f"üì¶ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: {order['tracking_number']}\n"
        
        order_text += "\n<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n"
        
        for item in items:
            size_text = f", —Ä–∞–∑–º–µ—Ä: {item['size_value']}" if item.get('size_value') else ""
            order_text += (
                f"‚ñ™ {item['name']}{size_text}\n"
                f"   {item['quantity']} √ó {item['price_at_order']} ‚ÇΩ = "
                f"{item['quantity'] * item['price_at_order']} ‚ÇΩ\n\n"
            )
        
        order_text += f"üí≥ <b>–ò—Ç–æ–≥–æ: {order['total_amount']} ‚ÇΩ</b>"
        
        await callback.message.edit_text(
            order_text,
            parse_mode=ParseMode.HTML,
            reply_markup=user_keyborad.back_to_orders_keyboard()
        )
        await callback.answer()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def send_order_notification(user_id: int, order_id: int, new_status: str, tracking_number: str = None):
    print("–©–∞ –æ—Ç–ø—Ä–∞–≤–ª—é")
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
    status_messages = {
        'processing': "üîÑ –í–∞—à –∑–∞–∫–∞–∑ #{} –ø–µ—Ä–µ–¥–∞–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É",
        'shipped': "üöö –í–∞—à –∑–∞–∫–∞–∑ #{} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω" + (f", —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä: {tracking_number}" if tracking_number else ""),
        'completed': "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{} –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!",
        'cancelled': "‚ùå –í–∞—à –∑–∞–∫–∞–∑ #{} –æ—Ç–º–µ–Ω–µ–Ω"
    }
    
    message = status_messages.get(new_status, f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑–º–µ–Ω–µ–Ω: {new_status}")
    
    try:
        print("–û—Ç–ø—Ä–∞–≤–ª—è—é")
        await bot.send_message(
            chat_id=user_id,
            text=message.format(order_id)
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ API)
async def handle_order_status_update(order_id: int, new_status: str, old_status: str, tracking_number: str = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
    conn = sqlite3.connect(DATABASE_NAME)
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        order = conn.execute("""
            SELECT user_id, status 
            FROM orders 
            WHERE order_id = ?
        """, (order_id,)).fetchone()
        
        if not order:
            return False
        
        user_id = order['user_id']
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await send_order_notification(user_id, order_id, new_status, tracking_number)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤
        if new_status in ['shipped', 'completed'] and old_status not in ['shipped', 'completed']:
            # –°–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ/–∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            update_inventory(order_id, decrease=True)
        elif new_status == 'cancelled' and old_status in ['shipped', 'completed']:
            # –í–æ–∑–≤—Ä–∞—Ç —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ/–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
            update_inventory(order_id, decrease=False)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        conn.execute("""
            UPDATE orders 
            SET updated_at = ? 
            WHERE order_id = ?
        """, (datetime.now(), order_id))
        conn.commit()
        
        return True
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
        conn.rollback()
        return False
    finally:
        conn.close()
def get_status_string(status):
    status_name = {
                'new': '–ù–æ–≤—ã–π',
                'processing': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
                'shipped': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
                'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω',
                'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
            }.get(status,'?')
    return status_name
@user_router.callback_query(F.data == "back_to_orders")
async def back_to_orders_list(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤"""
    try:
        user_id = callback.from_user.id
        orders = get_user_orders(user_id)
        
        if not orders:
            await callback.message.edit_text(
                "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤",
                reply_markup=user_keyborad.main_keyboard()
            )
            return
        
        orders_text = "üì¶ <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã</b>\n\n"
        for order in orders:
            status_emoji = {
                'new': 'üÜï',
                'processing': 'üîÑ', 
                'shipped': 'üöö',
                'completed': '‚úÖ',
                'cancelled': '‚ùå'
            }.get(order['status'], '‚ÑπÔ∏è')
            
            orders_text += (
                f"{status_emoji} <b>–ó–∞–∫–∞–∑ #{order['order_id']}</b>\n"
                f"üìÖ –î–∞—Ç–∞: {order['created_at']}\n"
                f"üè∑ –°—Ç–∞—Ç—É—Å: {get_status_string(order['status'])}\n"
                f"üí≥ –°—É–º–º–∞: {order['total_amount']} ‚ÇΩ\n\n"
            )
        
        await callback.message.edit_text(
            orders_text,
            parse_mode=ParseMode.HTML,
            reply_markup=user_keyborad.orders_keyboard(orders)
        )
        await callback.answer()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∑–∞–∫–∞–∑–æ–≤: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)