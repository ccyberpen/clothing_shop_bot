from aiogram import types,Router,F
from aiogram.filters import  CommandStart
from aiogram.fsm.context import FSMContext
from keyboards import user_keyborad
from aiogram.types import FSInputFile
from aiogram.enums import ParseMode
from utility.database import *
from handlers.states import CatalogStates
user_router= Router()


@user_router.message(CommandStart())
async def cmd_start(message: types.Message, state:FSMContext):
    await state.clear()
    if not get_user(message.from_user.id):
        add_user(message.from_user.id,message.from_user.username)
    await message.answer("üëï –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ \"–ù–æ—É–Ω–µ–π–º —Å—Ç–æ—Ä–µ\"!\n",reply_markup=user_keyborad.main_kb())
    

@user_router.message(F.text=="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def cmd_support(message: types.Message, state:FSMContext):
    await state.clear()
    photo = FSInputFile("static/images/support.jpg")
    support_text = (
        "üìû <b>–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n"
        "–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –∫–∞–∫–∏—Ö –ª–∏–±–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É:\n\n"
        "@cyberpen"
    )
    await message.answer_photo(
        photo=photo,
        caption=support_text,
        reply_markup=user_keyborad.main_kb(),
        parse_mode=ParseMode.HTML
    )
###########################################################
#                   –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ê–¢–ê–õ–û–ì–ê                  #
###########################################################
@user_router.message(F.text == "üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥")
async def start_catalog(message: types.Message, state: FSMContext):
    root_categories = get_categories(parent_id=None)
    
    if not root_categories:
        await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    await state.set_state(CatalogStates.choosing_category)
    await message.answer(
        "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=user_keyborad.catalog_keyboard(root_categories),
    )

@user_router.callback_query(F.data.startswith("cat_"), CatalogStates.choosing_category)
async def choose_category(callback: types.CallbackQuery, state: FSMContext):
    try:
        category_id = int(callback.data.split("_")[1])
        categories = get_categories(parent_id=category_id)
        
        if categories:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            await callback.message.edit_text(
                "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=user_keyborad.catalog_keyboard(categories, back_id=get_parent_id(category_id))
            )
        else:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            await callback.message.delete()
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
            await show_products(callback.message, category_id, state)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ choose_category: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")

async def show_products(message: types.Message, category_id: int, state: FSMContext):
    products = get_products(category_id)
    
    if not products:
        await message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")
        await state.clear()
        return
    await state.set_state(CatalogStates.viewing_products)
    await state.update_data(
        current_index=0,
        category_id=category_id,
        products=products
    )
    
    await display_product(message, products[0], 0, len(products), category_id)

async def display_product(message: types.Message, product: dict, index: int, total: int, category_id: int):
    images = get_product_images(product['product_id'])
    main_image = images[0] if images else None
    
    caption = (
        f"<b>{product['name']}</b>\n\n"
        f"üí∞ –¶–µ–Ω–∞: <code>{product['price']} ‚ÇΩ</code>\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product['description'] or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
        f"üÜî –ê—Ä—Ç–∏–∫—É–ª: <code>{product['product_id']}</code>"
    )
    
    if main_image:
        photo = FSInputFile(f'admin/static/products/{main_image['image_path']}')
        
        try:
            await message.answer_photo(
                photo=photo,
                caption=caption,
                reply_markup=user_keyborad.products_keyboard(index, total, category_id, product['product_id']),
                parse_mode=ParseMode.HTML
            )
            return
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    await message.answer(
        text=caption,
        reply_markup=user_keyborad.products_keyboard(index, total, category_id, product['product_id']),
        parse_mode=ParseMode.HTML
    )
    
@user_router.callback_query(F.data.startswith(("prev_", "next_")), CatalogStates.viewing_products)
async def navigate_product(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    products = data['products']
    
    action, current_idx, category_id = callback.data.split("_")
    current_idx = int(current_idx)
    
    new_idx = current_idx + 1 if action == "next" else current_idx - 1
    if 0 <= new_idx < len(products):
        await callback.message.delete()
        await display_product(callback.message, products[new_idx], new_idx, len(products), category_id)
        await state.update_data(current_index=new_idx)

@user_router.callback_query(F.data.startswith("back_to_cat_"), CatalogStates.viewing_products)
async def back_to_categories(callback: types.CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("_")[-1])
    parent_id = get_parent_id(category_id)
    
    if parent_id:
        categories = get_categories(parent_id=parent_id)
        await callback.message.delete()
        await callback.message.answer(
            "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=user_keyborad.catalog_keyboard(categories, back_id=get_parent_id(parent_id))
        )
    else:
        root_categories = get_categories(parent_id=None)
        await callback.message.delete()
        await callback.message.answer(
            "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=user_keyborad.catalog_keyboard(root_categories)
        )
    
    await state.set_state(CatalogStates.choosing_category)

@user_router.callback_query(F.data == "main_menu")
async def return_to_main_menu(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete()

def get_parent_id(category_id: int) -> int | None:
    """–ü–æ–ª—É—á–∞–µ–º ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
    conn = sqlite3.connect(DATABASE_NAME)
    cur = conn.cursor()
    cur.execute("""
        SELECT parent_id FROM categories 
        WHERE category_id = ?
    """, (category_id,))
    result = cur.fetchone()
    conn.close()
    
    if not result or not result[0] or str(result[0]).strip() == '':
        return None
    return int(result[0])