from aiogram import types,Router,F
from aiogram.filters import  CommandStart
from aiogram.fsm.context import FSMContext
from keyboards import user_keyborad
from aiogram.types import FSInputFile
from aiogram.enums import ParseMode
from utility.database import *
from handlers.states import CatalogStates, CartStates
import asyncio
from aiogram.utils.media_group import MediaGroupBuilder
from aiogram.utils.keyboard import InlineKeyboardBuilder
user_router= Router()


@user_router.message(CommandStart())
async def cmd_start(message: types.Message, state:FSMContext):
    await state.clear()
    if not get_user(message.from_user.id):
        add_user(message.from_user.id,message.from_user.username)
    await message.answer("üëï –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ \"–ù–æ—É–Ω–µ–π–º —Å—Ç–æ—Ä–µ\"!\n",reply_markup=user_keyborad.main_keyboard())
    

@user_router.message(F.text=="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def cmd_support(message: types.Message, state:FSMContext):
    await state.clear()
    photo = FSInputFile("static/images/support.jpg")
    support_text = (
        "üìû <b>–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n"
        "–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –∫–∞–∫–∏—Ö –ª–∏–±–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É:\n\n"
        "@cyberpen"
    )
    await message.answer_photo(
        photo=photo,
        caption=support_text,
        reply_markup=user_keyborad.main_kb(),
        parse_mode=ParseMode.HTML
    )
###########################################################
#                   –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ê–¢–ê–õ–û–ì–ê                  #
###########################################################
@user_router.message(F.text == "üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥")
async def start_catalog(message: types.Message, state: FSMContext):
    try:
        root_categories = get_categories(parent_id=None)
        
        if not root_categories:
            await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", reply_markup=user_keyborad.main_keyboard())
            return
        
        
        
        # 1. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        await message.answer(
            "–û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥...",
            reply_markup=types.ReplyKeyboardRemove()
        )
        
        # 2. –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã Telegram –æ–±—Ä–∞–±–æ—Ç–∞–ª —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        await asyncio.sleep(0.3)
        
        # 3. –£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        try:
            await message.bot.delete_message(
                chat_id=message.chat.id,
                message_id=message.message_id + 1  # ID —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            )
        except:
            pass
        
        # 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        sent_message = await message.answer(
            "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=user_keyborad.catalog_keyboard(root_categories)
        )
        await state.set_state(CatalogStates.choosing_category)
        await state.update_data(
            catalog_message_id = sent_message.message_id
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ start_catalog: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
            reply_markup=user_keyborad.main_keyboard()
        )

@user_router.callback_query(F.data.startswith("cat_"), CatalogStates.choosing_category)
async def choose_category(callback: types.CallbackQuery, state: FSMContext):
    try:
        category_id = int(callback.data.split("_")[1])
        categories = get_categories(parent_id=category_id)
        
        if categories:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            sent_message = await callback.message.edit_text(
                "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=user_keyborad.catalog_keyboard(categories, back_id=get_parent_id(category_id))
            )
            await state.update_data(
                catalog_message_id = sent_message.message_id
            )
        else:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            await callback.message.delete()
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
            await show_products(callback.message, category_id, state)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ choose_category: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")

async def show_products(message: types.Message, category_id: int, state: FSMContext):
    products = get_products(category_id)
    
    if not products:
        await message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")
        await state.clear()
        return
    
    await state.set_state(CatalogStates.viewing_products)
    await state.update_data(
        current_index=0,
        category_id=category_id,
        products=products,
        product_messages=[message.message_id]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    )
    
    await display_product(message, products[0], 0, len(products), category_id, state)

async def display_product(message: types.Message, product: dict, index: int, total: int, category_id: int, state: FSMContext):
    images = get_product_images(product['product_id'])
    caption = (
        f"<b>{product['name']}</b>\n\n"
        f"üí∞ –¶–µ–Ω–∞: <code>{product['price']} ‚ÇΩ</code>\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product['description'] or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
        f"üÜî –ê—Ä—Ç–∏–∫—É–ª: <code>{product['product_id']}</code>"
    )

    message_ids = []

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    data = await state.get_data()
    print(data["product_messages"])
    if 'product_messages' in data:
        for msg_id in reversed(data['product_messages']):
            try:
                print(f"–£–¥–∞–ª–µ–Ω–∏–µ {msg_id}")
                await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–æ–≤–∞—Ä–æ–º {msg_id}: {e}")
                continue

    if images:
        max_images = 10  # –õ–∏–º–∏—Ç Telegram
        images = images[:max_images]

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
            media_group = MediaGroupBuilder()
            for img in images:
                photo = FSInputFile(f"admin/static/products/{img['image_path']}")
                media_group.add_photo(media=photo)
            
            sent_messages = await message.answer_media_group(media=media_group.build())
            message_ids.extend([m.message_id for m in sent_messages])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    msg = await message.answer(
        text=caption,
        reply_markup=user_keyborad.products_keyboard(index, total, category_id, product['product_id']),
        parse_mode=ParseMode.HTML
    )
    message_ids.append(msg.message_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º IDs —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(product_messages=message_ids)
    print(f"–ò—Ç–æ–≥–æ –∏–º–µ–µ–º: {message_ids}")
    return message_ids

@user_router.callback_query(F.data.startswith(("prev_", "next_")), CatalogStates.viewing_products)
async def navigate_product(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    products = data['products']
    
    action, current_idx, category_id = callback.data.split("_")
    current_idx = int(current_idx)
    category_id = int(category_id)
    
    new_idx = current_idx + 1 if action == "next" else current_idx - 1
    if 0 <= new_idx < len(products):
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –Ω–æ–≤—ã—Ö
        if 'product_messages' in data:
            for msg_id in reversed(data['product_messages']):
                try:
                    await callback.bot.delete_message(
                        chat_id=callback.message.chat.id,
                        message_id=msg_id
                    )
                except:
                    continue
        
        await display_product(callback.message, products[new_idx], new_idx, len(products), category_id, state)
        await state.update_data(current_index=new_idx)

@user_router.callback_query(F.data.startswith("back_to_cat_"), CatalogStates.viewing_products)
async def back_to_categories(callback: types.CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("_")[-1])
    parent_id = get_parent_id(category_id)
    if parent_id:
        categories = get_categories(parent_id=parent_id)
        print(callback.message.message_id)
        await callback.message.delete()
        data = await state.get_data()
        if 'product_messages' in data:
            for msg_id in reversed(data['product_messages']):
                try:
                    await callback.bot.delete_message(chat_id=callback.message.chat.id, message_id=msg_id)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–æ–≤–∞—Ä–æ–º: {e}")
                    continue
        await callback.message.answer(
            "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=user_keyborad.catalog_keyboard(categories, back_id=get_parent_id(parent_id))
        )
    else:
        root_categories = get_categories(parent_id=None)
        await callback.message.delete()
        data = await state.get_data()
        if 'product_messages' in data:
            for msg_id in reversed(data['product_messages']):
                try:
                    await callback.bot.delete_message(chat_id=callback.message.chat.id, message_id=msg_id)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–æ–≤–∞—Ä–æ–º: {e}")
                    continue
        
        await callback.message.answer(
            "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=user_keyborad.catalog_keyboard(root_categories)
        )
    
    await state.set_state(CatalogStates.choosing_category)

@user_router.callback_query(F.data == "main_menu")
async def return_to_main_menu(callback: types.CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        if 'product_messages' in data:
            for msg_id in reversed(data['product_messages']):
                try:
                    await callback.bot.delete_message(chat_id=callback.message.chat.id, message_id=msg_id)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–æ–≤–∞—Ä–æ–º: {e}")
                    continue
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await callback.bot.delete_message(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id)
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await callback.message.answer(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=user_keyborad.main_keyboard()
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é: {e}")
        await callback.message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=user_keyborad.main_keyboard()
        )

def get_parent_id(category_id: int) -> int | None:
    """–ü–æ–ª—É—á–∞–µ–º ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
    conn = sqlite3.connect(DATABASE_NAME)
    cur = conn.cursor()
    cur.execute("""
        SELECT parent_id FROM categories 
        WHERE category_id = ?
    """, (category_id,))
    result = cur.fetchone()
    conn.close()
    
    if not result or not result[0] or str(result[0]).strip() == '':
        return None
    return int(result[0])

#######################################
#          –†–ê–ë–û–¢–ê –° –ö–û–†–ó–ò–ù–û–ô          #
#######################################
@user_router.callback_query(F.data.startswith("cart_"))
async def add_to_cart(callback: types.CallbackQuery, state: FSMContext):
    try:
        product_id = int(callback.data.split("_")[1])
        user_id = callback.from_user.id
        product = get_product(product_id)
        
        if not product:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        sizes = get_product_sizes(product_id)
        
        if sizes:
            await callback.answer()
            await state.set_state(CartStates.choosing_size)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
            sizes_kb = InlineKeyboardBuilder()
            available_sizes = []
            
            for size in sizes:
                if size['quantity'] > 0:
                    available_sizes.append(size)
                    sizes_kb.button(
                        text=f"{size['size_value']} (–æ—Å—Ç–∞–ª–æ—Å—å: {size['quantity']})",
                        callback_data=f"size_{size['size_id']}"
                    )
            
            if not available_sizes:
                await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤", show_alert=True)
                return
            
            sizes_kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_cart")
            sizes_kb.adjust(2)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            nav_data = await state.get_data()
            await state.update_data(
                product_id=product_id,
                product_name=product['name'],
                product_price=product['price'],
                product_index=nav_data.get('current_index', 0),
                category_id=nav_data.get('category_id'),
                products=nav_data.get('products', []),
                product_messages=nav_data.get('product_messages', [])
            )
            
            size_msg = await callback.message.answer(
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –¥–ª—è {product['name']}:",
                reply_markup=sizes_kb.as_markup()
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            messages = nav_data.get('product_messages', [])
            messages.append(size_msg.message_id)
            await state.update_data(product_messages=messages)
            
        else:
            # –î–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            total_quantity = get_product_total_quantity(product_id)
            if total_quantity <= 0:
                await callback.answer("–¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è", show_alert=True)
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ
            in_cart = check_product_in_cart(user_id, product_id)
            if in_cart >= total_quantity:
                await callback.answer(
                    f"–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ {total_quantity} —à—Ç.", 
                    show_alert=True
                )
                return
                
            add_to_cart_db(user_id, product_id)
            await callback.answer(f"{product['name']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@user_router.callback_query(F.data.startswith("size_"), CartStates.choosing_size)
async def choose_size(callback: types.CallbackQuery, state: FSMContext):
    try:
        size_id = int(callback.data.split("_")[1])
        user_id = callback.from_user.id
        data = await state.get_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        size_info = get_size_info(size_id)
        if not size_info or size_info['quantity'] <= 0:
            await callback.answer("–≠—Ç–æ—Ç —Ä–∞–∑–º–µ—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è", show_alert=True)
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        in_cart = check_product_in_cart(user_id, data['product_id'], size_id)
        if in_cart >= size_info['quantity']:
            await callback.answer(
                f"–ú–∞–∫—Å–∏–º—É–º {size_info['quantity']} —à—Ç. –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ {size_info['size_value']}",
                show_alert=True
            )
            return
            
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
        add_to_cart_db(user_id, data['product_id'], size_id)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ä–∞–∑–º–µ—Ä–∞
        await callback.message.delete()
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        await state.set_state(CatalogStates.viewing_products)
        await state.update_data(
            current_index=data['product_index'],
            category_id=data['category_id'],
            products=data['products'],
            product_messages=data.get('product_messages', [])
        )
        
        await callback.answer(
            f"{data['product_name']} (—Ä–∞–∑–º–µ—Ä: {size_info['size_value']}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!",
            show_alert=True
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await state.clear()

@user_router.callback_query(F.data == "cancel_cart", CartStates.choosing_size)
async def cancel_cart(callback: types.CallbackQuery, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º —Ç–æ–≤–∞—Ä–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ä–∞–∑–º–µ—Ä–∞
        await callback.message.delete()
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤
        await state.set_state(CatalogStates.viewing_products)
        await state.update_data(
            current_index=data['product_index'],
            category_id=data['category_id'],
            products=data['products'],
            product_messages=data.get('product_messages', [])
        )
        
        await callback.answer("–í—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ –æ—Ç–º–µ–Ω—ë–Ω")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        await state.clear()